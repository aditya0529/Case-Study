import boto3
import logging
from datetime import datetime, timezone
from dateutil.relativedelta import relativedelta
from botocore.exceptions import ClientError

# Initialize AWS clients
iam_client = boto3.client('iam')
config_client = boto3.client('config')
securityhub_client = boto3.client('securityhub')

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info("Starting IAM access key compliance check...")

    try:
        # Set the threshold to 23 months ago using relativedelta for precise calculation
        rotation_threshold_date = datetime.now(timezone.utc) - relativedelta(months=23)

        # Get AWS Account ID and Region from the Lambda context
        account_id = context.invoked_function_arn.split(":")[4]
        region = context.invoked_function_arn.split(":")[3]

        # Define ProductArn for custom findings in Security Hub
        product_arn = f"arn:aws:securityhub:{region}:{account_id}:product/{account_id}/default"

        # List to store non-compliant findings
        non_compliant_findings = []

        # Retrieve all IAM users using paginator
        paginator = iam_client.get_paginator('list_users')
        for page in paginator.paginate():
            users = page['Users']
            for user in users:
                user_name = user['UserName']
                logger.info(f"Processing user: {user_name}")

                # List access keys for the user using paginator
                try:
                    key_paginator = iam_client.get_paginator('list_access_keys')
                    for key_page in key_paginator.paginate(UserName=user_name):
                        access_keys = key_page['AccessKeyMetadata']
                        for key in access_keys:
                            # Check if the access key is active and older than the threshold
                            if key['Status'] == 'Active' and key['CreateDate'] < rotation_threshold_date:
                                key_id = key['AccessKeyId']
                                key_age_days = (datetime.now(timezone.utc) - key['CreateDate']).days
                                logger.warning(f"Access key {key_id} for user {user_name} is non-compliant (age: {key_age_days} days)")

                                # Construct the finding for Security Hub
                                finding = {
                                    "SchemaVersion": "2018-10-08",
                                    "Id": f"{user_name}/{key_id}",
                                    "ProductArn": product_arn,
                                    "GeneratorId": "iam-access-key-rotation-check",
                                    "AwsAccountId": account_id,
                                    "Types": [
                                        "Software and Configuration Checks/AWS Security Best Practices"
                                    ],
                                    "CreatedAt": datetime.now(timezone.utc).isoformat(),
                                    "UpdatedAt": datetime.now(timezone.utc).isoformat(),
                                    "Severity": {"Label": "HIGH"},
                                    "Title": "IAM Access Key Rotation Best Practice Violation",
                                    "Description": f"Active IAM access key {key_id} for user {user_name} is older than 23 months (Key Age: {key_age_days} days).",
                                    "Resources": [
                                        {
                                            "Type": "AwsIamAccessKey",
                                            "Id": f"arn:aws:iam::{account_id}:user/{user_name}",
                                            "Partition": "aws",
                                            "Region": region,
                                            "Details": {
                                                "AwsIamAccessKey": {
                                                    "UserName": user_name,
                                                    "Status": key['Status'],
                                                    "CreatedAt": key['CreateDate'].replace(tzinfo=timezone.utc).isoformat(),
                                                    "AccessKeyId": key_id
                                                }
                                            }
                                        }
                                    ],
                                    "Compliance": {
                                        "Status": "FAILED"
                                    },
                                    "RecordState": "ACTIVE"
                                }

                                non_compliant_findings.append(finding)
                except ClientError as e:
                    logger.error(f"Error retrieving access keys for user {user_name}: {e}")
                    continue

        # Report compliance status to AWS Config
        compliance_type = 'NON_COMPLIANT' if non_compliant_findings else 'COMPLIANT'
        try:
            config_client.put_evaluations(
                Evaluations=[
                    {
                        'ComplianceResourceType': 'AWS::IAM::User',
                        'ComplianceResourceId': 'IAMAccessKeyCheck',
                        'ComplianceType': compliance_type,
                        'OrderingTimestamp': datetime.now(timezone.utc)
                    },
                ],
                ResultToken=event.get('resultToken', 'NoTokenProvided')
            )
            logger.info(f"Compliance status reported to AWS Config: {compliance_type}")
        except ClientError as e:
            logger.error(f"Error reporting compliance status to AWS Config: {e}")

        # Send findings to AWS Security Hub
        if non_compliant_findings:
            try:
                # Batch the findings to a maximum of 100 per batch
                batch_size = 100
                for i in range(0, len(non_compliant_findings), batch_size):
                    batch = non_compliant_findings[i:i+batch_size]
                    response = securityhub_client.batch_import_findings(Findings=batch)
                    logger.info(f"Successfully sent {len(batch)} findings to AWS Security Hub.")
            except ClientError as e:
                logger.error(f"Error sending findings to AWS Security Hub: {e}")

        logger.info("IAM access key compliance check completed.")
        return {
            'statusCode': 200,
            'compliance_type': compliance_type
        }

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
        return {
            'statusCode': 500,
            'message': 'An unexpected error occurred while processing the request.'
        }
