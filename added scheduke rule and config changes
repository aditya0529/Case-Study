import boto3
import logging
import os
import json
from datetime import datetime, timezone
from dateutil.relativedelta import relativedelta
from botocore.exceptions import ClientError

# Initialize AWS clients
iam_client = boto3.client('iam')
config_client = boto3.client('config')

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Read configuration from environment variables
ROTATION_THRESHOLD_MONTHS = int(os.environ.get('ROTATION_THRESHOLD_MONTHS', '23'))

# ---------- Helper Functions ----------

def list_all_users():
    """List all IAM users."""
    logger.info("Listing all IAM users.")
    users = []
    paginator = iam_client.get_paginator('list_users')
    for page in paginator.paginate():
        users.extend(page['Users'])
    logger.info(f"Total IAM users retrieved: {len(users)}.")
    return users

def list_access_keys_for_user(user_name):
    """List all access keys for a given IAM user."""
    logger.info(f"Listing access keys for user: {user_name}.")
    access_keys = []
    key_paginator = iam_client.get_paginator('list_access_keys')
    for key_page in key_paginator.paginate(UserName=user_name):
        access_keys.extend(key_page['AccessKeyMetadata'])
    logger.info(f"User {user_name} has {len(access_keys)} access keys.")
    return access_keys

def is_key_non_compliant(key, rotation_threshold_date):
    """Check if an access key is non-compliant."""
    non_compliant = key['Status'] == 'Active' and key['CreateDate'] < rotation_threshold_date
    key_id = key['AccessKeyId']
    if non_compliant:
        logger.debug(f"Access key {key_id} is non-compliant.")
    else:
        logger.debug(f"Access key {key_id} is compliant.")
    return non_compliant

def check_and_update_config_compliance(user_name, compliance_type, result_token):
    """Update the IAM user's compliance status in AWS Config."""
    if result_token == 'NoOp':
        logger.info("NoOp result token received; skipping compliance update.")
        return
    logger.info(f"Updating AWS Config compliance for user {user_name} to {compliance_type}.")
    try:
        config_client.put_evaluations(
            Evaluations=[
                {
                    'ComplianceResourceType': 'AWS::IAM::User',
                    'ComplianceResourceId': user_name,
                    'ComplianceType': compliance_type,
                    'OrderingTimestamp': datetime.now(timezone.utc)
                }
            ],
            ResultToken=result_token
        )
        logger.info(f"Set compliance status of user {user_name} to {compliance_type}.")
    except ClientError as e:
        logger.error(f"Error updating AWS Config compliance for user {user_name}: {e}")

def get_non_compliant_findings(rotation_threshold_date, result_token):
    """Retrieve non-compliant IAM access keys and update compliance status."""
    logger.info("Retrieving non-compliant IAM access keys.")
    users = list_all_users()
    for user in users:
        user_name = user['UserName']
        logger.info(f"Processing user: {user_name}.")
        try:
            access_keys = list_access_keys_for_user(user_name)
            is_user_compliant = True  # Assume user is compliant until a non-compliant key is found
            for key in access_keys:
                if is_key_non_compliant(key, rotation_threshold_date):
                    is_user_compliant = False
                    # Update compliance to NON_COMPLIANT
                    check_and_update_config_compliance(user_name, 'NON_COMPLIANT', result_token)
                    break  # No need to check further keys, user is non-compliant
            if is_user_compliant:
                # Update compliance to COMPLIANT
                check_and_update_config_compliance(user_name, 'COMPLIANT', result_token)
        except ClientError as e:
            logger.error(f"Error retrieving access keys for user {user_name}: {e}")
            continue
    logger.info("Completed processing all users.")

def check_user_compliance(user_name, rotation_threshold_date, result_token):
    """Check compliance for a single IAM user."""
    logger.info(f"Checking compliance for user: {user_name}.")
    try:
        access_keys = list_access_keys_for_user(user_name)
        is_user_compliant = True  # Assume user is compliant until a non-compliant key is found
        for key in access_keys:
            if is_key_non_compliant(key, rotation_threshold_date):
                is_user_compliant = False
                # Update compliance to NON_COMPLIANT
                check_and_update_config_compliance(user_name, 'NON_COMPLIANT', result_token)
                break  # No need to check further keys, user is non-compliant
        if is_user_compliant:
            # Update compliance to COMPLIANT
            check_and_update_config_compliance(user_name, 'COMPLIANT', result_token)
    except ClientError as e:
        logger.error(f"Error retrieving access keys for user {user_name}: {e}")

# ---------- Lambda Handler ----------

def lambda_handler(event, context):
    """Main Lambda handler for AWS Config custom rule."""
    logger.info("Starting IAM access key compliance check.")
    logger.info(f"Received event: {event}")

    try:
        invoking_event = json.loads(event['invokingEvent'])
        rule_parameters = json.loads(event.get('ruleParameters', '{}'))
        result_token = event['resultToken']
        message_type = invoking_event['messageType']

        # Get the rotation threshold months from rule parameters or environment variable
        rotation_threshold_months = int(rule_parameters.get('RotationThresholdMonths', ROTATION_THRESHOLD_MONTHS))
        rotation_threshold_date = datetime.now(timezone.utc) - relativedelta(months=rotation_threshold_months)
        logger.info(f"Rotation threshold date is set to: {rotation_threshold_date}.")

        if message_type == 'ScheduledNotification':
            # Periodic check - check all IAM users
            logger.info("Scheduled trigger detected. Initiating compliance check for all IAM users.")
            get_non_compliant_findings(rotation_threshold_date, result_token)
        elif message_type == 'ConfigurationItemChangeNotification':
            # Configuration change - check the specific resource
            configuration_item = invoking_event['configurationItem']
            resource_type = configuration_item['resourceType']
            if resource_type == 'AWS::IAM::User':
                user_name = configuration_item['resourceName']
                logger.info(f"Configuration change detected for IAM user: {user_name}")
                check_user_compliance(user_name, rotation_threshold_date, result_token)
            else:
                logger.info(f"Ignoring non-IAM user resource type: {resource_type}")
        else:
            logger.info(f"Unhandled message type: {message_type}")

        return {'statusCode': 200, 'message': 'Compliance check completed.'}

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
        return {'statusCode': 500, 'message': 'An unexpected error occurred while processing the request.'}
