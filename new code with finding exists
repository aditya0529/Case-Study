import boto3
import logging
import os
from datetime import datetime, timezone
from dateutil.relativedelta import relativedelta
from botocore.exceptions import ClientError

# Initialize AWS clients
iam_client = boto3.client('iam')
securityhub_client = boto3.client('securityhub')

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Read configuration from environment variables
ROTATION_THRESHOLD_MONTHS = int(os.environ.get('ROTATION_THRESHOLD_MONTHS', '23'))
SEVERITY_THRESHOLD = os.environ.get('SEVERITY_THRESHOLD', 'HIGH')

def get_account_id_and_region(context):
    """Extract AWS account ID and region from the Lambda context."""
    logger.info("Extracting account ID and region from the context.")
    arn_parts = context.invoked_function_arn.split(":")
    region = arn_parts[3]
    account_id = arn_parts[4]
    logger.info(f"Extracted account ID: {account_id} and region: {region}.")
    return account_id, region

def list_all_users():
    """List all IAM users."""
    logger.info("Listing all IAM users.")
    users = []
    paginator = iam_client.get_paginator('list_users')
    for page in paginator.paginate():
        users.extend(page['Users'])
    logger.info(f"Retrieved {len(users)} IAM users.")
    return users

def list_access_keys_for_user(user_name):
    """List all access keys for a given IAM user."""
    logger.info(f"Listing access keys for user: {user_name}")
    access_keys = []
    key_paginator = iam_client.get_paginator('list_access_keys')
    for key_page in key_paginator.paginate(UserName=user_name):
        access_keys.extend(key_page['AccessKeyMetadata'])
    logger.info(f"Retrieved {len(access_keys)} access keys for user: {user_name}")
    return access_keys

def is_key_non_compliant(key, rotation_threshold_date):
    """Check if an access key is non-compliant."""
    non_compliant = key['Status'] == 'Active' and key['CreateDate'] < rotation_threshold_date
    if non_compliant:
        logger.debug(f"Access key {key['AccessKeyId']} is non-compliant.")
    return non_compliant

def construct_finding(user_name, key, key_age_days, account_id, region, product_arn):
    """Construct a Security Hub finding for a non-compliant access key."""
    logger.info(f"Constructing finding for user: {user_name}, key ID: {key['AccessKeyId']}.")
    key_id = key['AccessKeyId']
    finding = {
        "SchemaVersion": "2018-10-08",
        "Id": f"{user_name}/{key_id}",
        "ProductArn": product_arn,
        "GeneratorId": "iam-access-key-rotation-check",
        "AwsAccountId": account_id,
        "Types": [
            "Software and Configuration Checks/AWS Security Best Practices"
        ],
        "CreatedAt": datetime.now(timezone.utc).isoformat(),
        "UpdatedAt": datetime.now(timezone.utc).isoformat(),
        "Severity": {"Label": "HIGH"},
        "Title": "IAM Access Key Rotation Best Practice Violation",
        "Description": f"Active IAM access key {key_id} for user {user_name} is older than {ROTATION_THRESHOLD_MONTHS} months (Key Age: {key_age_days} days).",
        "Resources": [
            {
                "Type": "AwsIamAccessKey",
                "Id": f"arn:aws:iam::{account_id}:user/{user_name}",
                "Partition": "aws",
                "Region": region,
                "Details": {
                    "AwsIamAccessKey": {
                        "UserName": user_name,
                        "Status": key['Status'],
                        "CreatedAt": key['CreateDate'].replace(tzinfo=timezone.utc).isoformat(),
                        "AccessKeyId": key_id
                    }
                }
            }
        ],
        "Compliance": {
            "Status": "FAILED"
        },
        "RecordState": "ACTIVE"
    }
    logger.debug(f"Constructed finding: {finding}")
    return finding

def finding_exists(finding_id, product_arn):
    """Check if a finding with the specified ID and ProductArn already exists in Security Hub."""
    logger.info(f"Checking if finding {finding_id} exists in Security Hub.")
    try:
        response = securityhub_client.get_findings(
            Filters={
                'Id': [{'Value': finding_id, 'Comparison': 'EQUALS'}],
                'ProductArn': [{'Value': product_arn, 'Comparison': 'EQUALS'}]
            }
        )
        exists = len(response['Findings']) > 0
        if exists:
            logger.info(f"Finding {finding_id} already exists in Security Hub.")
        else:
            logger.info(f"Finding {finding_id} does not exist in Security Hub.")
        return exists
    except ClientError as e:
        logger.error(f"Error checking existence of finding {finding_id}: {e}")
        return False

def get_non_compliant_findings(rotation_threshold_date, account_id, region, product_arn):
    """Retrieve non-compliant IAM access keys and construct findings."""
    logger.info("Retrieving non-compliant IAM access keys.")
    non_compliant_findings = []
    users = list_all_users()
    for user in users:
        user_name = user['UserName']
        logger.info(f"Processing user: {user_name}")
        try:
            access_keys = list_access_keys_for_user(user_name)
            for key in access_keys:
                if is_key_non_compliant(key, rotation_threshold_date):
                    key_id = key['AccessKeyId']
                    key_age_days = (datetime.now(timezone.utc) - key['CreateDate']).days
                    finding_id = f"{user_name}/{key_id}"

                    # Construct finding and check if it already exists
                    finding = construct_finding(user_name, key, key_age_days, account_id, region, product_arn)
                    if finding_exists(finding_id, product_arn):
                        logger.info(f"Skipping existing finding {finding_id}.")
                    else:
                        non_compliant_findings.append(finding)
        except ClientError as e:
            logger.error(f"Error retrieving access keys for user {user_name}: {e}")
            continue
    logger.info(f"Total non-compliant findings: {len(non_compliant_findings)}")
    return non_compliant_findings

def send_findings_to_security_hub(findings):
    """Send the non-compliant findings to AWS Security Hub."""
    if not findings:
        logger.info("No findings to send to Security Hub.")
        return

    try:
        batch_size = 100
        logger.info(f"Sending {len(findings)} findings to Security Hub in batches of {batch_size}.")
        for i in range(0, len(findings), batch_size):
            batch = findings[i:i+batch_size]
            response = securityhub_client.batch_import_findings(Findings=batch)
            logger.info(f"Successfully sent {len(batch)} findings to AWS Security Hub.")
    except ClientError as e:
        logger.error(f"Error sending findings to AWS Security Hub: {e}")

def update_finding_to_resolved(finding_id, account_id, region, product_arn):
    """Update the Security Hub finding to RESOLVED."""
    logger.info(f"Updating finding {finding_id} to RESOLVED.")
    try:
        securityhub_client.batch_update_findings(
            FindingIdentifiers=[
                {
                    'Id': finding_id,
                    'ProductArn': product_arn
                },
            ],
            Workflow={
                'Status': 'RESOLVED'
            },
            RecordState='ARCHIVED'
        )
        logger.info(f"Updated finding {finding_id} to RESOLVED.")
    except ClientError as e:
        logger.error(f"Error updating finding {finding_id} to RESOLVED: {e}")

def handle_delete_access_key_event(event, account_id, region, product_arn):
    """Handle IAM access key deletion events."""
    if event['detail']['eventName'] == 'DeleteAccessKey':
        user_name = event['detail']['requestParameters'].get('userName') or event['detail']['userIdentity']['userName']
        access_key_id = event['detail']['requestParameters']['accessKeyId']
        finding_id = f"{user_name}/{access_key_id}"
        logger.info(f"Access key {access_key_id} for user {user_name} was deleted. Updating finding to RESOLVED.")

        update_finding_to_resolved(finding_id, account_id, region, product_arn)
        return {
            'statusCode': 200,
            'message': f"Finding {finding_id} updated to RESOLVED."
        }

def lambda_handler(event, context):
    logger.info("Starting IAM access key compliance check...")

    try:
        # Set the rotation threshold date
        rotation_threshold_date = datetime.now(timezone.utc) - relativedelta(months=ROTATION_THRESHOLD_MONTHS)
        logger.info(f"Rotation threshold date set to: {rotation_threshold_date}")

        # Get AWS Account ID and Region
        account_id, region = get_account_id_and_region(context)

        # Define ProductArn for custom findings
        product_arn = f"arn:aws:securityhub:{region}:{account_id}:product/{account_id}/default"

        # Check if this is an access key deletion event
        if 'detail-type' in event and event['detail-type'] == 'AWS API Call via CloudTrail':
            return handle_delete_access_key_event(event, account_id, region, product_arn)

        # Get non-compliant access keys and construct findings
        non_compliant_findings = get_non_compliant_findings(rotation_threshold_date, account_id, region, product_arn)

        # Send findings to AWS Security Hub
        send_findings_to_security_hub(non_compliant_findings)

        logger.info("IAM access key compliance check completed.")
        return {
            'statusCode': 200,
            'message': 'Compliance check completed.'
        }

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
        return {
            'statusCode': 500,
            'message': 'An unexpected error occurred while processing the request.'
        }
